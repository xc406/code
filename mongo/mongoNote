mongo localhost/db doc.js
mongo db
db.collection.find({field: ''},{field1:1,field2:0})
db.motif_instance_hughes_test.findOne({'motif_tf_info.msource_author': 'Chen'}).tf_name
db.motif_instance_hughes_test.find({'motif_tf_info.msource_year': {$gt: 2010, $lte: 2013} })
$in: ["", ""] 
$nin
$all
$ne
$or: [{field1: ""},{field2: ""},{tf_name: 1}]
$nor
$and
$exists
$mod: {dbds: {$not: {$mod: [5,0]}}}
$elemMatch: {motif_tf_info: {$elemMatch: {msource_author: "Chen"}}}
{motif_tf_info: {$elemMatch: {msource_year: {$lt: new Date(2011,3,6)}}}}
$where: {$where: {'this.tf_name === 'Klf4''}}
var f = function() {return this.tf_name === 'Klf4'}
db.collection.find(f)
db.collection.distinct('motif_score')
db.collection.group({
	key:{userId: true},
	initial: {favCount = 0},
	reduce: function(doc,o) {o.favCount += doc.favorites;},
	finalize: function(o) {o.name = db.user.findOne({_id: o.userId}).name;}
	})
$regex: {field: {$regex:/tuts\+$/}}
db.collection.count({'tf_name': 'Klf4'})
db.collection.find({},{tf_name: 1, motif_score: 1, motif_id: 0}).sort({motif_score: -1, tf_name: 1}).limit(1)
db.collection.find({},{tf_name: 1, motif_score: 1, motif_id: 0}).skip(0 * 3)##skip three docs on page 0
db.collection.update({tf_name: 'Klf4'},{motif_score: 1e-5}) ##update by replacement, lost all other fields
db.collection.update({tf_name: 'Klf4'},{tf_name: 'Klf4', motif_score: 1e-5},true) ##update by insert
var n = {title: "haha"}
db.collection.update(n, {$inc: {motif_score: o.motif_score}})
db.collection.update(n, {$set: {motif_score: o.motif_score}})
db.collection.update(n, {$unset: {motif_score: userId.motif_score}}) ##only update the first document it finds
db.collection.update(n, {$unset: {motif_score: userId.motif_score}},false##upsert,true##multiparameters update multiple docs)
var bob = db.collection.findOne{name: "bob"}
bob.job = 'developer'##updated
db.collection.findAndModify({
query: {name: ''},
update: {$set: {age: 20}},
new: true ##print modified version otherwise return unupdated objects
fields: {name: 1}
sort: {name: -1}
})
db.collection.update({tf_name='Klf4'},{$push: {ct: 'K562'}})##push to update array objects
db.collection.update({tf_name='Klf4'},{$pushAll : {ct: ['K562',''Gm12878]}})##push an array inside of an array object
db.collection.update({tf_name='Klf4'},{$addToSet: {ct: 'K562'}})##check and add only it will be unique in the array object
db.collection.update({tf_name='Klf4'},{$addToSet: {ct: {$each: ['K562','Th17']}}})##check each and add only if it will uniquely exist
$pull
$pullAll
$pop: -1 front 1 end
db.collection.update(n,{$inc: {logins.$.minutes: 10}}, false, true)##update all
db.collection.update(n,{$set: {logins.$.location: 'unknown'}}, false, true)
db.collection.update(n,{$rename: {'tf_name': 'tfname'}})##rename field name
db.dropDatabase()
db.motif_instance_hughes_test.find().explain()
db.collection.ensureindex({tf_name:1})
db.systems.indexes.find()
dropDups: true ##keep first one of multiple docs that share the same field value
sparse: true ##not included in index if docs does not contain indexed field
index a,b,c == a; a,b; a,b,c
db.collection.dropIndex()


